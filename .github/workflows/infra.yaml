name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
        - plan
        - apply
        - destroy
  pull_request:
    paths:
      - 'infra/**'
      - '.github/workflows/infra.yaml'
    branches:
      - main

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  TF_WORKING_DIR: ./infra

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Debug Variables
      run: |
        echo "AWS_REGION: ${{ vars.AWS_REGION }}"
        echo "AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}"
        echo "GitHub Repository: ${{ github.repository }}"
        echo "GitHub Ref: ${{ github.ref }}"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
        role-session-name: GitHubActions-Terraform
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify AWS Credentials
      run: |
        aws sts get-caller-identity
        aws iam get-role --role-name mirror-deploy-role

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Plan
      if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan'
      run: terraform plan -out=tfplan
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      run: terraform apply -auto-approve
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform destroy -auto-approve
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Get Terraform Outputs
      if: github.event.inputs.action == 'apply' || github.event_name == 'pull_request'
      run: |
        terraform output -json > terraform_outputs.json
        echo "CLOUDFRONT_URL=$(terraform output -raw cloudfront_url)" >> $GITHUB_ENV
        echo "API_BASE_URL=$(terraform output -raw api_base_url)" >> $GITHUB_ENV
        echo "FRONTEND_BUCKET=$(terraform output -raw frontend_bucket_name)" >> $GITHUB_ENV
        echo "LAMBDA_FUNCTION_NAME=$(terraform output -raw lambda_function_name)" >> $GITHUB_ENV
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Upload Terraform Outputs
      if: github.event.inputs.action == 'apply' || github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs
        path: ${{ env.TF_WORKING_DIR }}/terraform_outputs.json
        retention-days: 30 